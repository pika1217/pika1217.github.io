<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[三栏布局]]></title>
    <url>%2F2017%2F07%2F08%2FCSS%2F%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;style type=&quot;text/css&quot;&gt;html,body&#123; height: 100%; margin: 0 ;&#125; /* float 关键是要把主体div放在最后，左右两栏div顺序任意。 代码足够简洁与高效 不足在于clear:both属性不能加在中间div上 */ .first div&#123; background-color: red; &#125; .first &gt; .left&#123; float: left; width: 100px; height: 100px; &#125; .first &gt; .right&#123; float: right; width: 100px; height: 100px; &#125; .first &gt; .middle&#123; margin:0 120px; height: 100px; &#125; /*position绝对定位 理解容易，上手简单，受内部元素影响而破坏布局的概率低 */ .second div&#123; background-color: green; &#125; .second &gt; .left,.second &gt; .right&#123; position: absolute; width:100px; height: 100px; top:120; /*默认应该为0*/ &#125; .second &gt; .left&#123;left:0;&#125; .second &gt; .right&#123;right: 0;&#125; .second &gt; .middle&#123;height: 100px;margin :0 120px;&#125; /*display:flex*/ .third&#123; display: flex; &#125; .third div&#123; background-color: #eee; &#125; .third &gt; .left,.third &gt; .right&#123; width:100px; height: 100px; &#125; .third &gt; .middle&#123; flex:1; margin: 0 10px; &#125; /* margin负值法 三栏相互关联，可谓真正意义上的自适应，布局不易受内部影响。 缺点在于：代码相对复杂。 原理:首先设置main的width为100%,然后三者float:left, 则按html顺序是main、left、right，此时由于main独占一行从而使得left和right换行显示。 再设置left的margin-left:-100%,使得left向左平移了100%width到达最左边并且左外边框与浏览器窗口重合，再令right的margin-left: -100px， 向左平移100px，最后设置body的margin: 0 120px,使得三者分开。 */ #main&#123; width: 100%; float: left; &#125; #main #body&#123; margin: 0 120px; background-color: black; &#125; #left,#right&#123; width:100px; height: 100%; float: left; background-color: black; &#125; #left&#123; margin-left: -100%; &#125; #right&#123; margin-left: -100px; &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;first&quot;&gt; &lt;div id=&quot;div1&quot; class=&quot;left&quot;&gt;111&lt;/div&gt; &lt;div id=&quot;div3&quot; class=&quot;right&quot;&gt;333&lt;/div&gt; &lt;div id=&quot;div2&quot; class=&quot;middle&quot;&gt;222&lt;/div&gt; //写到最后 &lt;/div&gt;&lt;/br&gt; &lt;div class=&quot;second&quot;&gt; &lt;div id=&quot;div1&quot; class=&quot;left&quot;&gt;111&lt;/div&gt; &lt;div id=&quot;div3&quot; class=&quot;right&quot;&gt;333&lt;/div&gt; &lt;div id=&quot;div2&quot; class=&quot;middle&quot;&gt;222&lt;/div&gt; //写到最后 &lt;/div&gt; &lt;/br&gt; &lt;div class=&quot;third&quot;&gt; &lt;div id=&quot;div1&quot; class=&quot;left&quot;&gt;111&lt;/div&gt; &lt;div id=&quot;div2&quot; class=&quot;middle&quot;&gt;222&lt;/div&gt; &lt;div id=&quot;div3&quot; class=&quot;right&quot;&gt;333&lt;/div&gt; &lt;/div&gt; &lt;/br&gt; &lt;div class=&quot;fourth&quot;&gt; &lt;div id=&quot;main&quot;&gt; &lt;div id=&quot;body&quot; class=&quot;middle&quot;&gt;222&lt;/div&gt; //写到前面 &lt;/div&gt; &lt;div id=&quot;left&quot; class=&quot;left&quot;&gt;111&lt;/div&gt; &lt;div id=&quot;right&quot; class=&quot;right&quot;&gt;333&lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>布局方式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Web浏览器缓存机制]]></title>
    <url>%2F2017%2F07%2F08%2F%E7%BD%91%E7%BB%9C%2FWeb%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%2F</url>
    <content type="text"><![CDATA[一、浏览器的缓存规则 从新鲜度和检验值两个维度来规定浏览器是否直接使用缓存中的副本还是重新获取资源。 新鲜度(过期机制，优先级高) Expires(过期日期) Cache-Control(max-age(多少秒数后过期) no-chahe(忽略缓存的副本而向服务器发送请求) no-store(强制缓存不要保留副本并直接向服务器发送请求) 不会发送请求到服务器去验证资源的新旧程度，满足任一即可： 含有完整的过期时间控制头信息（HTTP协议报文），并且仍在有效期内 浏览器已经使用过这个缓存副本，并且在一个会话中已经检查过新鲜度。 校验值(验证机制) Last-Modified（文件最后修改时间） ETag(文件标识，只要文件改变标识就会变化)(优先级高))第二次请求时会将If-Modified-Since或者If-None-Match发送给服务器验证资源的新旧程度 服务器返回资源的时候有时在控制头信息带上这个资源的实体标签Etag（Entity Tag），它可以用来作为浏览器再次请求过程的校验标识。如过发现校验标识不匹配，说明资源已经被修改或过期，浏览器需要重新获取资源内容。 二、浏览器缓存的控制使用HTML Meta标签告诉页面忽略缓存副本，每次都向服务器请求资源，缓存代理器不支持，部分浏览器不支持 使用缓存相关的HTTP消息报头1.Cahce-Control与ExpiresCache-Control与Expires的作用一致，都是指明当前资源的有效期，控制浏览器是否直接从浏览器缓存取数据还是重新发请求到服务器取数据。只不过Cache-Control的选择更多，设置更细致，如果同时设置的话，其优先级高于Expires。 2.Last-Modified/ETag与Cache-control/Expries 配置Last-Modified/ETag的情况下，浏览器再次访问统一URI的资源，还是会发送请求到服务器询问文件是否已经修改，如果没有，服务器会只发送一个304回给浏览器，告诉浏览器直接从自己本地的缓存取数据；如果修改过那就整个数据重新发给浏览器； Cache-Control/Expires则不同，如果检测到本地的缓存还是有效的时间范围内，浏览器直接使用本地副本，不会发送任何请求。两者一起使用时，Cache-Control/Expires的优先级要高于Last-Modified/ETag。即当本地副本根据Cache-Control/Expires发现还在有效期内时，则不会再次发送请求去服务器询问修改时间（Last-Modified）或实体标识（Etag）了。 一般情况下，使用Cache-Control/Expires会配合Last-Modified/ETag一起使用，因为即使服务器设置缓存时间, 当用户点击“刷新”按钮时，浏览器会忽略缓存继续向服务器发送请求，这时Last-Modified/ETag将能够很好利用304，从而减少响应开销。 3.Last-Modified与ETag服务器会优先验证ETag，一致的情况下，才会继续比对Last-Modified你可能会觉得使用Last-Modified已经足以让浏览器知道本地的缓存副本是否足够新，为什么还需要Etag（实体标识）呢？HTTP1.1中Etag的出现主要是为了解决几个Last-Modified比较难解决的问题： Last-Modified标注的最后修改只能精确到秒级，如果某些文件在1秒钟以内，被修改多次的话，它将不能准确标注文件的新鲜度 如果某些文件会被定期生成，当有时内容并没有任何变化，但Last-Modified却改变了，导致文件没法使用缓存 有可能存在服务器没有准确获取文件修改时间，或者与代理服务器时间不一致等情形 三、哪些请求不能被缓存无法被浏览器缓存的请求： HTTP信息头中包含Cache-Control:no-cache，pragma:no-cache，或Cache-Control:max-age=0等告诉浏览器不用缓存的请求 需要根据Cookie，认证信息等决定输入内容的动态请求是不能被缓存的 经过HTTPS安全加密的请求 POST请求无法被缓存 HTTP响应头中不包含Last-Modified/Etag，也不包含Cache-Control/Expires的请求无法被缓存]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>浏览器缓存</tag>
      </tags>
  </entry>
</search>