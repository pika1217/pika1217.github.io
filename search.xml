<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[水平居中布局]]></title>
    <url>%2F2017%2F07%2F08%2FCSS%2F%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[margin:0 auto;（最常用的居中布局方式,元素宽度已知（块级元素有宽度，内联元素有内容）,未浮动，一定是用在元素本身不是父元素。父元素如果是块级元素则不用设置width默认占据一行。父元素如果是内联元素则需要display:inline-block,再设置宽度。如果是多个内联元素或者多个块级元素，则需要都放在一个块级元素里再使用此方法。因为设置完了display: inline-block 之后margin：0 auto无效了，或者直接使用第二种方法。 text-align和inline-block的结合（设置父元素的text-align为center）。这种方式最好应用于图片、按钮、文字之类的居中模式，否则就需要借助inline-block来进行居中布局。多个块级元素水平排列居中布局时更适合选用这种方法。 position绝对定位来实现居中布局。适用于块级元素不给出宽高的情况下(需要借助transtrom的tanslateX方法)，当又需要对多个child进行居中时需要在child外层再加一个div并对其进行定位。 #parent{ position: relative; } #child{ position: absolute; left: 50%; top: 0; -ms-transform: translate(-50%,-50%); -moz-transform: translate(-50%,-50%); -o-transform: translate(-50%,-50%); transform: translate(-50%,-50%); background-color: #ccc; } 利用flex弹性布局的一个属性子元素是否有宽度不重要body{ display: flex; justify-content:center; } 浮动实现水平居中的方法12345678910111213141516171819202122232425.child&#123; float: left; position: relative; right: 50%; &#125; #part&#123; float:left; width:100%; overflow: hidden; position: relative; &#125; #part2&#123; clear: left; float: left; position: relative; left:50%; &#125; &lt;div id=&quot;part&quot;&gt; &lt;div id=&quot;part2&quot;&gt; &lt;div class=&quot;child&quot;&gt;one&lt;/div&gt; &lt;div class=&quot;child&quot;&gt;two&lt;/div&gt; &lt;div class=&quot;child&quot;&gt;thr&lt;/div&gt; &lt;div class=&quot;child&quot;&gt;four&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; CSS3的fit-content实现水平居中方法居中一个浮动元素 .child{ float: left; } #part2{ width: -moz-fit-content; width: -webkit-fit-content; width: fit-content; margin: auto; } 以下例子中除了第一种方式需要给宽度，其它方式都能不给宽度。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182 &lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;style type=&quot;text/css&quot;&gt; .first-way&#123; width:100px; height: 100px; background-color: red; margin: 0 auto; &#125; .second-way&#123; width:100%; text-align: center; overflow: hidden;//实际是没有的 &#125; .second-child&#123; display: inline-block; width:100px; height:100px; background-color: red; &#125; .third-way&#123; position: absolute; left:50%; top:0%; /*默认应该是0%*/ transform:translateX(-50%); /*向左移动元素宽度的一半长度*/ width:300px; height:100px; border: 1px solid green; &#125; .fourth-way&#123; display: flex; justify-content:center; &#125; .fourth-way &gt; div&#123; width:100px; height:100px; background-color: red; &#125; .five-way&#123; width: -moz-fit-content; width: -webkit-fit-content; width: fit-content; margin: auto; &#125; .five-way &gt; div&#123; float:left; width:100px; height:100px; background-color: red; &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;first-way&quot;&gt; 第一种方式 &lt;/div&gt; &lt;/br&gt; &lt;div class=&quot;second-way&quot;&gt; &lt;div class=&quot;second-child&quot;&gt;第二种方式&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;third-way&quot;&gt; 第三种方式 &lt;/div&gt; &lt;/br&gt; &lt;div class=&quot;fourth-way&quot;&gt; &lt;div&gt;第四种&lt;/div&gt; &lt;/div&gt; &lt;div&gt; &lt;/br&gt; &lt;div class=&quot;five-way&quot;&gt; &lt;div&gt; 第五种 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>布局方式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Web浏览器缓存机制]]></title>
    <url>%2F2017%2F07%2F08%2F%E7%BD%91%E7%BB%9C%2FWeb%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%2F</url>
    <content type="text"><![CDATA[一、浏览器的缓存规则 从新鲜度和检验值两个维度来规定浏览器是否直接使用缓存中的副本还是重新获取资源。 新鲜度(过期机制，优先级高) Expires(过期日期) Cache-Control(max-age(多少秒数后过期) no-chahe(忽略缓存的副本而向服务器发送请求) no-store(强制缓存不要保留副本并直接向服务器发送请求) 不会发送请求到服务器去验证资源的新旧程度，满足任一即可： 含有完整的过期时间控制头信息（HTTP协议报文），并且仍在有效期内 浏览器已经使用过这个缓存副本，并且在一个会话中已经检查过新鲜度。 校验值(验证机制) Last-Modified（文件最后修改时间） ETag(文件标识，只要文件改变标识就会变化)(优先级高))第二次请求时会将If-Modified-Since或者If-None-Match发送给服务器验证资源的新旧程度 服务器返回资源的时候有时在控制头信息带上这个资源的实体标签Etag（Entity Tag），它可以用来作为浏览器再次请求过程的校验标识。如过发现校验标识不匹配，说明资源已经被修改或过期，浏览器需要重新获取资源内容。 二、浏览器缓存的控制使用HTML Meta标签告诉页面忽略缓存副本，每次都向服务器请求资源，缓存代理器不支持，部分浏览器不支持 使用缓存相关的HTTP消息报头1.Cahce-Control与ExpiresCache-Control与Expires的作用一致，都是指明当前资源的有效期，控制浏览器是否直接从浏览器缓存取数据还是重新发请求到服务器取数据。只不过Cache-Control的选择更多，设置更细致，如果同时设置的话，其优先级高于Expires。 2.Last-Modified/ETag与Cache-control/Expries 配置Last-Modified/ETag的情况下，浏览器再次访问统一URI的资源，还是会发送请求到服务器询问文件是否已经修改，如果没有，服务器会只发送一个304回给浏览器，告诉浏览器直接从自己本地的缓存取数据；如果修改过那就整个数据重新发给浏览器； Cache-Control/Expires则不同，如果检测到本地的缓存还是有效的时间范围内，浏览器直接使用本地副本，不会发送任何请求。两者一起使用时，Cache-Control/Expires的优先级要高于Last-Modified/ETag。即当本地副本根据Cache-Control/Expires发现还在有效期内时，则不会再次发送请求去服务器询问修改时间（Last-Modified）或实体标识（Etag）了。 一般情况下，使用Cache-Control/Expires会配合Last-Modified/ETag一起使用，因为即使服务器设置缓存时间, 当用户点击“刷新”按钮时，浏览器会忽略缓存继续向服务器发送请求，这时Last-Modified/ETag将能够很好利用304，从而减少响应开销。 3.Last-Modified与ETag服务器会优先验证ETag，一致的情况下，才会继续比对Last-Modified你可能会觉得使用Last-Modified已经足以让浏览器知道本地的缓存副本是否足够新，为什么还需要Etag（实体标识）呢？HTTP1.1中Etag的出现主要是为了解决几个Last-Modified比较难解决的问题： Last-Modified标注的最后修改只能精确到秒级，如果某些文件在1秒钟以内，被修改多次的话，它将不能准确标注文件的新鲜度 如果某些文件会被定期生成，当有时内容并没有任何变化，但Last-Modified却改变了，导致文件没法使用缓存 有可能存在服务器没有准确获取文件修改时间，或者与代理服务器时间不一致等情形 三、哪些请求不能被缓存无法被浏览器缓存的请求： HTTP信息头中包含Cache-Control:no-cache，pragma:no-cache，或Cache-Control:max-age=0等告诉浏览器不用缓存的请求 需要根据Cookie，认证信息等决定输入内容的动态请求是不能被缓存的 经过HTTPS安全加密的请求 POST请求无法被缓存 HTTP响应头中不包含Last-Modified/Etag，也不包含Cache-Control/Expires的请求无法被缓存]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>浏览器缓存</tag>
      </tags>
  </entry>
</search>